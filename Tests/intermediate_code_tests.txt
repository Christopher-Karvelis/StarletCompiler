======================================================================

TEST 1,


INPUT : 
----------------------------------------------------------------------
program squareArea
	declare x, area;
	input x;
	print (x * x)
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, squareArea, _, _
1:  inp, x, _, _
2:  *, x, x, T_0
3:  out, T_0, _, _
4:  halt, _, _, _
5:  end_block, squareArea, _, _
----------------------------------------------------------------------


======================================================================

TEST 2,


INPUT : 
----------------------------------------------------------------------
program simpleFuncCall
	declare retVar;
	
	function f1(in a, in b)
		return a + 2*b
	endfunction

	retVar := f1(in 2, in 3)
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, f1, _, _
1:  *, 2, b, T_0
2:  +, a, T_0, T_1
3:  retv, T_1, _, _
4:  end_block, f1, _, _
5:  begin_block, simpleFuncCall, _, _
6:  par, 2, CV, _
7:  par, 3, CV, _
8:  par, T_2, RET, _
9:  call, f1, _, _
10:  :=, T_2, _, retVar
11:  halt, _, _, _
12:  end_block, simpleFuncCall, _, _
----------------------------------------------------------------------


======================================================================

TEST 3,


INPUT : 
----------------------------------------------------------------------
program IfCondOr
	declare x,y,w;
	input x;
	input y;
	input w;
	if(x>y or x<w) then
		print 1;
	else
		print 2;
	endif

	
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, IfCondOr, _, _
1:  inp, x, _, _
2:  inp, y, _, _
3:  inp, w, _, _
4:  >, x, y, 8
5:  jump, _, _, 6
6:  <, x, w, 8
7:  jump, _, _, 10
8:  out, 1, _, _
9:  jump, _, _, 11
10:  out, 2, _, _
11:  halt, _, _, _
12:  end_block, IfCondOr, _, _
----------------------------------------------------------------------


======================================================================

TEST 4,


INPUT : 
----------------------------------------------------------------------
program IfCondAnd
	declare x,y,w;
	input x;
	input y;
	input w;
	if(x>y and x<w) then
		print 1;
	else
		print 2;
	endif

	
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, IfCondAnd, _, _
1:  inp, x, _, _
2:  inp, y, _, _
3:  inp, w, _, _
4:  >, x, y, 6
5:  jump, _, _, 10
6:  <, x, w, 8
7:  jump, _, _, 10
8:  out, 1, _, _
9:  jump, _, _, 11
10:  out, 2, _, _
11:  halt, _, _, _
12:  end_block, IfCondAnd, _, _
----------------------------------------------------------------------


======================================================================

TEST 5,


INPUT : 
----------------------------------------------------------------------
program IfMissStatements
	declare x,y,w;
	input x;
	input y;
	input w;
	if(x>y or x<w) then
		
	else
		
	endif

	
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, IfMissStatements, _, _
1:  inp, x, _, _
2:  inp, y, _, _
3:  inp, w, _, _
4:  >, x, y, 8
5:  jump, _, _, 6
6:  <, x, w, 8
7:  jump, _, _, 9
8:  jump, _, _, 9
9:  halt, _, _, _
10:  end_block, IfMissStatements, _, _
----------------------------------------------------------------------


======================================================================

TEST 6,


INPUT : 
----------------------------------------------------------------------
program IfCondAndOr0
	declare x0,x1,x2;
	input x0;
	input x1;
	input x2;
	if( [x0 = 0] and [x1 = 1 or x2 = 2] ) then
		print 1;
	else
		print 0;
	endif

	
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, IfCondAndOr0, _, _
1:  inp, x0, _, _
2:  inp, x1, _, _
3:  inp, x2, _, _
4:  =, x0, 0, 6
5:  jump, _, _, 12
6:  =, x1, 1, 10
7:  jump, _, _, 8
8:  =, x2, 2, 10
9:  jump, _, _, 12
10:  out, 1, _, _
11:  jump, _, _, 13
12:  out, 0, _, _
13:  halt, _, _, _
14:  end_block, IfCondAndOr0, _, _
----------------------------------------------------------------------


======================================================================

TEST 7,


INPUT : 
----------------------------------------------------------------------
program IfCondAndOr1
	declare x0,x1,x2;
	input x0;
	input x1;
	input x2;
	if( [x0 = 0 and x1 = 1] or [x2 = 2] ) then
		print 1;
	else
		print 0;
	endif

	
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, IfCondAndOr1, _, _
1:  inp, x0, _, _
2:  inp, x1, _, _
3:  inp, x2, _, _
4:  =, x0, 0, 6
5:  jump, _, _, 8
6:  =, x1, 1, 10
7:  jump, _, _, 8
8:  =, x2, 2, 10
9:  jump, _, _, 12
10:  out, 1, _, _
11:  jump, _, _, 13
12:  out, 0, _, _
13:  halt, _, _, _
14:  end_block, IfCondAndOr1, _, _
----------------------------------------------------------------------


======================================================================

TEST 8,


INPUT : 
----------------------------------------------------------------------
program Count10WithWhile
	declare x0;
	x0 := 1;
	while( not [x0 >= 11] )
		print x0;
		x0 := x0 + 1;
	endwhile

endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, Count10WithWhile, _, _
1:  :=, 1, _, x0
2:  >=, x0, 11, 8
3:  jump, _, _, 4
4:  out, x0, _, _
5:  +, x0, 1, T_0
6:  :=, T_0, _, x0
7:  jump, _, _, 2
8:  halt, _, _, _
9:  end_block, Count10WithWhile, _, _
----------------------------------------------------------------------


======================================================================

TEST 9,


INPUT : 
----------------------------------------------------------------------
program NestedWhilePrint1To2For10Times
	declare iter, count;
	iter := 1;
	while( iter < 11)
		count := 1;
		while( count < 3)
			print count;
			count := count + 1;
		endwhile;
		iter := iter + 1;
	endwhile

endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, NestedWhilePrint1To2For10Times, _, _
1:  :=, 1, _, iter
2:  <, iter, 11, 4
3:  jump, _, _, 14
4:  :=, 1, _, count
5:  <, count, 3, 7
6:  jump, _, _, 11
7:  out, count, _, _
8:  +, count, 1, T_0
9:  :=, T_0, _, count
10:  jump, _, _, 5
11:  +, iter, 1, T_1
12:  :=, T_1, _, iter
13:  jump, _, _, 2
14:  halt, _, _, _
15:  end_block, NestedWhilePrint1To2For10Times, _, _
----------------------------------------------------------------------


======================================================================

TEST 10,


INPUT : 
----------------------------------------------------------------------
program Count10WithDoWhile
	declare x0;
	x0 := 1;
	dowhile
		print x0;
		x0 := x0 + 1;
	enddowhile( not[x0 >= 11])

endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, Count10WithDoWhile, _, _
1:  :=, 1, _, x0
2:  out, x0, _, _
3:  +, x0, 1, T_0
4:  :=, T_0, _, x0
5:  >=, x0, 11, 7
6:  jump, _, _, 2
7:  halt, _, _, _
8:  end_block, Count10WithDoWhile, _, _
----------------------------------------------------------------------


======================================================================

TEST 11,


INPUT : 
----------------------------------------------------------------------
program NestedDoWhilePrint1To2For10Times
	declare iter, count;
	iter := 1;
	dowhile
		count := 1;
		dowhile
			print count;
			count := count + 1;
		enddowhile( count < 3);
		iter := iter + 1;
	enddowhile( iter < 11)

endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, NestedDoWhilePrint1To2For10Tim, _, _
1:  :=, 1, _, iter
2:  :=, 1, _, count
3:  out, count, _, _
4:  +, count, 1, T_0
5:  :=, T_0, _, count
6:  <, count, 3, 3
7:  jump, _, _, 8
8:  +, iter, 1, T_1
9:  :=, T_1, _, iter
10:  <, iter, 11, 2
11:  jump, _, _, 12
12:  halt, _, _, _
13:  end_block, NestedDoWhilePrint1To2For10Tim, _, _
----------------------------------------------------------------------


======================================================================

TEST 12,


INPUT : 
----------------------------------------------------------------------
program loopForever
	loop
		
	endloop
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, loopForever, _, _
1:  jump, _, _, 1
2:  halt, _, _, _
3:  end_block, loopForever, _, _
----------------------------------------------------------------------


======================================================================

TEST 13,


INPUT : 
----------------------------------------------------------------------
program Count10WithLoop
	declare count;
	count := 1;
	loop
		print count;
		if(count = 10) then
			exit;
		else
			count := count + 1;
		endif;
	endloop
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, Count10WithLoop, _, _
1:  :=, 1, _, count
2:  out, count, _, _
3:  =, count, 10, 5
4:  jump, _, _, 7
5:  jump, _, _, 10
6:  jump, _, _, 9
7:  +, count, 1, T_0
8:  :=, T_0, _, count
9:  jump, _, _, 2
10:  halt, _, _, _
11:  end_block, Count10WithLoop, _, _
----------------------------------------------------------------------


======================================================================

TEST 14,


INPUT : 
----------------------------------------------------------------------
program LoopCheckEvenOdd
	declare num, even, i;
	input num;
	i := 0;
	even := 1;
	loop
		if(i = num) then
			if(even = 0) then
				print 0; //is odd
				exit;
			else
				print 1; //is even
				exit;
			endif
		endif;
		even := even + 1;
		if(even = 2) then
			even := 0;
		endif;
		i:=i+1;
	endloop;
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, LoopCheckEvenOdd, _, _
1:  inp, num, _, _
2:  :=, 0, _, i
3:  :=, 1, _, even
4:  =, i, num, 6
5:  jump, _, _, 14
6:  =, even, 0, 8
7:  jump, _, _, 11
8:  out, 0, _, _
9:  jump, _, _, 23
10:  jump, _, _, 13
11:  out, 1, _, _
12:  jump, _, _, 23
13:  jump, _, _, 14
14:  +, even, 1, T_0
15:  :=, T_0, _, even
16:  =, even, 2, 18
17:  jump, _, _, 20
18:  :=, 0, _, even
19:  jump, _, _, 20
20:  +, i, 1, T_1
21:  :=, T_1, _, i
22:  jump, _, _, 4
23:  halt, _, _, _
24:  end_block, LoopCheckEvenOdd, _, _
----------------------------------------------------------------------


======================================================================

TEST 15,


INPUT : 
----------------------------------------------------------------------
program NestedLoopPrint1To2For10Times
	declare iter, count;
	iter := 1;
	loop
		if(iter > 10) then
			exit;
		endif;
		count := 1;
		loop
			if(count > 2) then
				exit;
			endif;
			print count;
			count := count + 1;
		endloop;
		iter := iter + 1;
	endloop
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, NestedLoopPrint1To2For10Times, _, _
1:  :=, 1, _, iter
2:  >, iter, 10, 4
3:  jump, _, _, 6
4:  jump, _, _, 18
5:  jump, _, _, 6
6:  :=, 1, _, count
7:  >, count, 2, 9
8:  jump, _, _, 11
9:  jump, _, _, 15
10:  jump, _, _, 11
11:  out, count, _, _
12:  +, count, 1, T_0
13:  :=, T_0, _, count
14:  jump, _, _, 7
15:  +, iter, 1, T_1
16:  :=, T_1, _, iter
17:  jump, _, _, 2
18:  halt, _, _, _
19:  end_block, NestedLoopPrint1To2For10Times, _, _
----------------------------------------------------------------------


======================================================================

TEST 16,


INPUT : 
----------------------------------------------------------------------
program forcaseLoopForever
	forcase
		default:
			
		enddefault
	endforcase
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, forcaseLoopForever, _, _
1:  jump, _, _, 1
2:  halt, _, _, _
3:  end_block, forcaseLoopForever, _, _
----------------------------------------------------------------------


======================================================================

TEST 17,


INPUT : 
----------------------------------------------------------------------
program forcaseReach10Or20
	declare num;
	input num;
	forcase

		when (num > 10):
			loop
				if (num > 20) then
					exit;
				endif;
				print num;
				num := num + 1; 
			endloop;
			print 0;
		when (num = 10):
			print 10;
			print 1;
		when (num = 10):// unreachable
			print 10;
			print 2;
		default: //num<10
			num := num + 1;
			print 333
		enddefault
	endforcase
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, forcaseReach10Or20, _, _
1:  inp, num, _, _
2:  >, num, 10, 4
3:  jump, _, _, 14
4:  >, num, 20, 6
5:  jump, _, _, 8
6:  jump, _, _, 12
7:  jump, _, _, 8
8:  out, num, _, _
9:  +, num, 1, T_0
10:  :=, T_0, _, num
11:  jump, _, _, 4
12:  out, 0, _, _
13:  jump, _, _, 28
14:  =, num, 10, 16
15:  jump, _, _, 19
16:  out, 10, _, _
17:  out, 1, _, _
18:  jump, _, _, 28
19:  =, num, 10, 21
20:  jump, _, _, 24
21:  out, 10, _, _
22:  out, 2, _, _
23:  jump, _, _, 28
24:  +, num, 1, T_1
25:  :=, T_1, _, num
26:  out, 333, _, _
27:  jump, _, _, 2
28:  halt, _, _, _
29:  end_block, forcaseReach10Or20, _, _
----------------------------------------------------------------------


======================================================================

TEST 18,


INPUT : 
----------------------------------------------------------------------
program incasePrintNumto10
	declare num;
	input num;
	incase
		when (num = 1):
			print 1;
			num := num + 1
		when (num = 2):
			print 2;
			num := num + 1
		when (num = 3):
			print 3;
			num := num + 1
		when (num = 4):
			print 4;
			num := num + 1
		when (num = 5):
			print 5;
			num := num + 1
		when (num = 6):
			print 6;
			num := num + 1
		when (num = 7):
			print 7;
			num := num + 1
		when (num = 8):
			print 8;
			num := num + 1
		when (num = 9):
			print 9;
			num := num + 1
		when (num = 10):
			print 10;
			num := num + 1
	endincase
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, incasePrintNumto10, _, _
1:  inp, num, _, _
2:  :=, 0, _, T_0
3:  =, num, 1, 5
4:  jump, _, _, 9
5:  out, 1, _, _
6:  +, num, 1, T_1
7:  :=, T_1, _, num
8:  :=, 1, _, T_0
9:  =, num, 2, 11
10:  jump, _, _, 15
11:  out, 2, _, _
12:  +, num, 1, T_2
13:  :=, T_2, _, num
14:  :=, 1, _, T_0
15:  =, num, 3, 17
16:  jump, _, _, 21
17:  out, 3, _, _
18:  +, num, 1, T_3
19:  :=, T_3, _, num
20:  :=, 1, _, T_0
21:  =, num, 4, 23
22:  jump, _, _, 27
23:  out, 4, _, _
24:  +, num, 1, T_4
25:  :=, T_4, _, num
26:  :=, 1, _, T_0
27:  =, num, 5, 29
28:  jump, _, _, 33
29:  out, 5, _, _
30:  +, num, 1, T_5
31:  :=, T_5, _, num
32:  :=, 1, _, T_0
33:  =, num, 6, 35
34:  jump, _, _, 39
35:  out, 6, _, _
36:  +, num, 1, T_6
37:  :=, T_6, _, num
38:  :=, 1, _, T_0
39:  =, num, 7, 41
40:  jump, _, _, 45
41:  out, 7, _, _
42:  +, num, 1, T_7
43:  :=, T_7, _, num
44:  :=, 1, _, T_0
45:  =, num, 8, 47
46:  jump, _, _, 51
47:  out, 8, _, _
48:  +, num, 1, T_8
49:  :=, T_8, _, num
50:  :=, 1, _, T_0
51:  =, num, 9, 53
52:  jump, _, _, 57
53:  out, 9, _, _
54:  +, num, 1, T_9
55:  :=, T_9, _, num
56:  :=, 1, _, T_0
57:  =, num, 10, 59
58:  jump, _, _, 63
59:  out, 10, _, _
60:  +, num, 1, T_10
61:  :=, T_10, _, num
62:  :=, 1, _, T_0
63:  =, T_0, 1, 2
64:  halt, _, _, _
65:  end_block, incasePrintNumto10, _, _
----------------------------------------------------------------------


======================================================================

TEST 19,


INPUT : 
----------------------------------------------------------------------
program incasePrintNumTo10Special1
	declare num;
	input num;
	incase
		when (num = 1):
			print 1;
			loop
				if(num > 8) then
					exit;
				endif;
				num := num + 1
			endloop;
			num := num + 1
		when (num = 2):
			print 2;
			num := num + 1
		when (num = 3):
			print 3;
			num := num + 1
		when (num = 4):
			print 4;
			num := num + 1
		when (num = 5):
			print 5;
			num := num + 1
		when (num = 6):
			print 6;
			num := num + 1
		when (num = 7):
			print 7;
			num := num + 1
		when (num = 8):
			print 8;
			num := num + 1
		when (num = 9):
			print 9;
			num := num + 1
		when (num = 10):
			print 10;
			num := num + 1
	endincase
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, incasePrintNumTo10Special1, _, _
1:  inp, num, _, _
2:  :=, 0, _, T_0
3:  =, num, 1, 5
4:  jump, _, _, 16
5:  out, 1, _, _
6:  >, num, 8, 8
7:  jump, _, _, 10
8:  jump, _, _, 13
9:  jump, _, _, 10
10:  +, num, 1, T_1
11:  :=, T_1, _, num
12:  jump, _, _, 6
13:  +, num, 1, T_2
14:  :=, T_2, _, num
15:  :=, 1, _, T_0
16:  =, num, 2, 18
17:  jump, _, _, 22
18:  out, 2, _, _
19:  +, num, 1, T_3
20:  :=, T_3, _, num
21:  :=, 1, _, T_0
22:  =, num, 3, 24
23:  jump, _, _, 28
24:  out, 3, _, _
25:  +, num, 1, T_4
26:  :=, T_4, _, num
27:  :=, 1, _, T_0
28:  =, num, 4, 30
29:  jump, _, _, 34
30:  out, 4, _, _
31:  +, num, 1, T_5
32:  :=, T_5, _, num
33:  :=, 1, _, T_0
34:  =, num, 5, 36
35:  jump, _, _, 40
36:  out, 5, _, _
37:  +, num, 1, T_6
38:  :=, T_6, _, num
39:  :=, 1, _, T_0
40:  =, num, 6, 42
41:  jump, _, _, 46
42:  out, 6, _, _
43:  +, num, 1, T_7
44:  :=, T_7, _, num
45:  :=, 1, _, T_0
46:  =, num, 7, 48
47:  jump, _, _, 52
48:  out, 7, _, _
49:  +, num, 1, T_8
50:  :=, T_8, _, num
51:  :=, 1, _, T_0
52:  =, num, 8, 54
53:  jump, _, _, 58
54:  out, 8, _, _
55:  +, num, 1, T_9
56:  :=, T_9, _, num
57:  :=, 1, _, T_0
58:  =, num, 9, 60
59:  jump, _, _, 64
60:  out, 9, _, _
61:  +, num, 1, T_10
62:  :=, T_10, _, num
63:  :=, 1, _, T_0
64:  =, num, 10, 66
65:  jump, _, _, 70
66:  out, 10, _, _
67:  +, num, 1, T_11
68:  :=, T_11, _, num
69:  :=, 1, _, T_0
70:  =, T_0, 1, 2
71:  halt, _, _, _
72:  end_block, incasePrintNumTo10Special1, _, _
----------------------------------------------------------------------


======================================================================

TEST 20,


INPUT : 
----------------------------------------------------------------------
program printOppositeNum
	declare num;
	input num;
	print -num;
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, printOppositeNum, _, _
1:  inp, num, _, _
2:  -, num, _, T_0
3:  out, T_0, _, _
4:  halt, _, _, _
5:  end_block, printOppositeNum, _, _
----------------------------------------------------------------------


======================================================================

TEST 21,


INPUT : 
----------------------------------------------------------------------
program whileDiff555
	declare num;
	dowhile
		input num;
		print num;
	enddowhile(num<>555)
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, whileDiff555, _, _
1:  inp, num, _, _
2:  out, num, _, _
3:  <>, num, 555, 1
4:  jump, _, _, 5
5:  halt, _, _, _
6:  end_block, whileDiff555, _, _
----------------------------------------------------------------------


======================================================================

TEST 22,


INPUT : 
----------------------------------------------------------------------
program whileDiff555
	declare num;
	dowhile
		input num;
		print num;
	enddowhile(num<>-(-555))
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, whileDiff555, _, _
1:  inp, num, _, _
2:  out, num, _, _
3:  -, 555, _, T_0
4:  -, T_0, _, T_1
5:  <>, num, T_1, 1
6:  jump, _, _, 7
7:  halt, _, _, _
8:  end_block, whileDiff555, _, _
----------------------------------------------------------------------


======================================================================

TEST 23,


INPUT : 
----------------------------------------------------------------------
program symbol

	declare A, a, b, c;
	
	function P1 (in x, inout y)
		declare a;
		
		function F11 (in x)
			declare a;
			b:=a;
			a:=x;
			c:=F11(in x);
			return c;
		endfunction

		function F21(in x)
			c:=F11(in x);
			return c;
		endfunction

		return 0
	endfunction

	function P2 (in y)
		declare x;
		y:=A;
		return P1 (in x, inout y);
	endfunction
	a := P1 (in a, inout b);
	a := P2 (in c);
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, F11, _, _
1:  :=, a, _, b
2:  :=, x, _, a
3:  par, x, CV, _
4:  par, T_0, RET, _
5:  call, F11, _, _
6:  :=, T_0, _, c
7:  retv, c, _, _
8:  end_block, F11, _, _
9:  begin_block, F21, _, _
10:  par, x, CV, _
11:  par, T_1, RET, _
12:  call, F11, _, _
13:  :=, T_1, _, c
14:  retv, c, _, _
15:  end_block, F21, _, _
16:  begin_block, P1, _, _
17:  retv, 0, _, _
18:  end_block, P1, _, _
19:  begin_block, P2, _, _
20:  :=, A, _, y
21:  par, x, CV, _
22:  par, y, REF, _
23:  par, T_2, RET, _
24:  call, P1, _, _
25:  retv, T_2, _, _
26:  end_block, P2, _, _
27:  begin_block, symbol, _, _
28:  par, a, CV, _
29:  par, b, REF, _
30:  par, T_3, RET, _
31:  call, P1, _, _
32:  :=, T_3, _, a
33:  par, c, CV, _
34:  par, T_4, RET, _
35:  call, P2, _, _
36:  :=, T_4, _, a
37:  halt, _, _, _
38:  end_block, symbol, _, _
----------------------------------------------------------------------


======================================================================

TEST 24,


INPUT : 
----------------------------------------------------------------------
program exams
	declare c,a,b,t;
	a := 1;
	while( a+b<1 and b<5)
		if (t=1) then
			c:=2;
		else
			if (t=2) then
				c:=4;
			else
				c:=0;
			endif
		endif;
		while(a<1)
			if(a=2) then
				while(b=1)
					c:=2;
				endwhile
			endif
		endwhile
	endwhile
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, exams, _, _
1:  :=, 1, _, a
2:  +, a, b, T_0
3:  <, T_0, 1, 5
4:  jump, _, _, 27
5:  <, b, 5, 7
6:  jump, _, _, 27
7:  =, t, 1, 9
8:  jump, _, _, 11
9:  :=, 2, _, c
10:  jump, _, _, 16
11:  =, t, 2, 13
12:  jump, _, _, 15
13:  :=, 4, _, c
14:  jump, _, _, 16
15:  :=, 0, _, c
16:  <, a, 1, 18
17:  jump, _, _, 26
18:  =, a, 2, 20
19:  jump, _, _, 25
20:  =, b, 1, 22
21:  jump, _, _, 24
22:  :=, 2, _, c
23:  jump, _, _, 20
24:  jump, _, _, 25
25:  jump, _, _, 16
26:  jump, _, _, 2
27:  halt, _, _, _
28:  end_block, exams, _, _
----------------------------------------------------------------------


======================================================================

TEST 25,


INPUT : 
----------------------------------------------------------------------
program exams
	declare a,b;
	function P1(in x, inout y)
		declare c,d;
		function P11(in w, inout z)
			declare e;
			function P21(in x)
				e := x;
				z := w;
				e := P21(in a);
				return (e)
			endfunction
			e := z;
			z := w;
			e := P21(in c);
			return (e)
		endfunction
		b := 100;
		c := P11(in b, inout c);
		y := b+c;
		return (a)
	endfunction
	a := P1(in a, inout b)
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, P21, _, _
1:  :=, x, _, e
2:  :=, w, _, z
3:  par, a, CV, _
4:  par, T_0, RET, _
5:  call, P21, _, _
6:  :=, T_0, _, e
7:  retv, e, _, _
8:  end_block, P21, _, _
9:  begin_block, P11, _, _
10:  :=, z, _, e
11:  :=, w, _, z
12:  par, c, CV, _
13:  par, T_1, RET, _
14:  call, P21, _, _
15:  :=, T_1, _, e
16:  retv, e, _, _
17:  end_block, P11, _, _
18:  begin_block, P1, _, _
19:  :=, 100, _, b
20:  par, b, CV, _
21:  par, c, REF, _
22:  par, T_2, RET, _
23:  call, P11, _, _
24:  :=, T_2, _, c
25:  +, b, c, T_3
26:  :=, T_3, _, y
27:  retv, a, _, _
28:  end_block, P1, _, _
29:  begin_block, exams, _, _
30:  par, a, CV, _
31:  par, b, REF, _
32:  par, T_4, RET, _
33:  call, P1, _, _
34:  :=, T_4, _, a
35:  halt, _, _, _
36:  end_block, exams, _, _
----------------------------------------------------------------------


======================================================================

TEST 26,


INPUT : 
----------------------------------------------------------------------
program nestedMaxCalls
	declare a,b,c,d;
	function max(in x, in y)
		if(x>y) then
			return (x)
		else
			return (y)
		endif
	endfunction
	c := max(in max(in a, in b), in max(in c, in d))
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, max, _, _
1:  >, x, y, 3
2:  jump, _, _, 5
3:  retv, x, _, _
4:  jump, _, _, 6
5:  retv, y, _, _
6:  end_block, max, _, _
7:  begin_block, nestedMaxCalls, _, _
8:  par, a, CV, _
9:  par, b, CV, _
10:  par, T_0, RET, _
11:  call, max, _, _
12:  par, c, CV, _
13:  par, d, CV, _
14:  par, T_1, RET, _
15:  call, max, _, _
16:  par, T_0, CV, _
17:  par, T_1, CV, _
18:  par, T_2, RET, _
19:  call, max, _, _
20:  :=, T_2, _, c
21:  halt, _, _, _
22:  end_block, nestedMaxCalls, _, _
----------------------------------------------------------------------


======================================================================

TEST 27,


INPUT : 
----------------------------------------------------------------------
program test
	declare a, b;
	function f(in a1, in b1)
		declare x;
		x := a+b;
		return x;
	endfunction
	function P(in a)
		declare x;
		x := f(in x, in x);
		return x;
	endfunction
endprogram
----------------------------------------------------------------------

QUADS :
----------------------------------------------------------------------
0:  begin_block, f, _, _
1:  +, a, b, T_0
2:  :=, T_0, _, x
3:  retv, x, _, _
4:  end_block, f, _, _
5:  begin_block, P, _, _
6:  par, x, CV, _
7:  par, x, CV, _
8:  par, T_1, RET, _
9:  call, f, _, _
10:  :=, T_1, _, x
11:  retv, x, _, _
12:  end_block, P, _, _
13:  begin_block, test, _, _
14:  halt, _, _, _
15:  end_block, test, _, _
----------------------------------------------------------------------
